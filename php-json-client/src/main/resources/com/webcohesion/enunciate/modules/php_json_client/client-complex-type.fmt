[#ftl]
[#--template for the client-side complex type.--]
[#macro createPhpJsonObject currentIdentifier currentClass]
  [#compress]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
      ${currentIdentifier}
    [#elseif currentClass == "Object"]
      (object) ${currentIdentifier}
    [#else]
      new \${currentClass}(${currentIdentifier})
    [/#if]
  [/#compress]
[/#macro]
[#macro toPhpJsonInstance newIdentifier currentIdentifier currentClass indent]
  [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Boolean" || currentClass == "Array"]
${indent}${newIdentifier} = ${currentIdentifier};
  [#elseif currentClass == "Object"]
${indent}${newIdentifier} = (array) ${currentIdentifier};
  [#else]
${indent}${newIdentifier} = ${currentIdentifier}->toArray();
  [/#if]
[/#macro] 
[#macro writeComplexType type]
[#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jackson.model.TypeDefinition" --]

namespace ${namespaceFor(type)};

/**
[#if type.javaDoc??]
 * ${((type.javaDoc.toString())!"(no documentation provided)")?replace("\n", "\n     * ")}
[#else]
 * (no documentation provided)
[/#if]
 */
class ${simpleNameFor(type)}[#if !type.baseObject] extends \${classnameFor(type.superclass)}[/#if]
{
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(type.value)}
     */
    private $${type.value.clientSimpleName};
      [/#if]
    [#else]
      [#list type.members as member]
        [#if !isFacetExcluded(member)]

    /**
     * ${(member.javaDoc.return!member.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(member)}
     */
    private $${member.clientSimpleName};
        [/#if]
      [/#list]
    [/#if]
    [#if type.wildcardMember??]

    /**
     * ${(type.wildcardMember.javaDoc.return!type.wildcardMember.docValue!"Additional elements.")?chop_linebreak?replace("\n", "\n   * ")}
     */
    private $${type.wildcardMember.clientSimpleName} = array();
    [/#if]

    /**
     * Constructs a ${simpleNameFor(type)} from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(type.value)}
     */
    public function get${type.value.clientSimpleName?cap_first}()
    {
        return $this->${type.value.clientSimpleName};
    }

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(type.value)} $${type.value.clientSimpleName}
     */
    public function set${type.value.clientSimpleName?cap_first}($${type.value.clientSimpleName})
    {
        $this->${type.value.clientSimpleName} = $${type.value.clientSimpleName};
    }
      [/#if]
    [#else]
      [#list type.members as member]
        [#if !isFacetExcluded(member)]
    /**
     * ${(member.javaDoc.return!member.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(member)}
     */
    public function get${member.clientSimpleName?cap_first}()
    {
        return $this->${member.clientSimpleName};
    }

    /**
     * ${(member.javaDoc.return!member.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(member)} $${member.clientSimpleName}
     */
    public function set${member.clientSimpleName?cap_first}($${member.clientSimpleName})
    {
        $this->${member.clientSimpleName} = $${member.clientSimpleName};
    }
        [/#if]
      [/#list]
    [/#if]
    /**
     * Returns the associative array for this ${simpleNameFor(type)}
     *
     * @return array
     */
    public function toArray()
    {
    [#if type.baseObject]
        $a = array();
    [#else]
        $a = parent::toArray();
    [/#if]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if (isset($this->${type.value.clientSimpleName})) {
            [@toPhpJsonInstance '$a["_value"]' '$this->${type.value.clientSimpleName}' '${classnameFor(type.value)}' '            '/]
        }
      [/#if]
    [#else]
      [#list type.members as member]
        [#if !isFacetExcluded(member)]
          [#if member.collectionType]
        if (isset($this->${member.clientSimpleName})) {
            $ab = array();
            foreach ($this->${member.clientSimpleName} as $i => $x) {
                [@toPhpJsonInstance '$ab[$i]' '$x' '${classnameFor(member.collectionItemType)}' '                '/]
            }
            $a['${member.name}'] = $ab;
        }
          [#else]
        if (isset($this->${member.clientSimpleName})) {
            [@toPhpJsonInstance '$a["${member.name}"]' '$this->${member.clientSimpleName}' '${classnameFor(member)}' '            ' /]
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
        return $a;
    }

    [#if type.baseObject]
    /**
     * Returns the JSON string for this ${simpleNameFor(type)}
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    [/#if]

    /**
     * Initializes this ${simpleNameFor(type)} from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
    [#if !type.baseObject]
        parent::initFromArray($o);
    [/#if]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if (isset($o['${type.value.clientSimpleName}'])) {
            $this->${type.value.clientSimpleName} = [@createPhpJsonObject '$o["_value"]' '${classnameFor(type.value)}' /];
        }
      [/#if]
    [#else]
      [#list type.members as member]
        [#if !isFacetExcluded(member)]
          [#if member.collectionType]
        $this->${member.clientSimpleName} = array();
        if (isset($o['${member.name}'])) {
            foreach ($o['${member.name}'] as $i => $x) {
                $this->${member.clientSimpleName}[$i] = [@createPhpJsonObject '$x' '${classnameFor(member.collectionItemType)}' /];
            }
        }
          [#else]
        if (isset($o['${member.name}'])) {
            $this->${member.clientSimpleName} = [@createPhpJsonObject '$o["${member.name}"]' '${classnameFor(member)}' /];
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
    }
}
[/#macro]